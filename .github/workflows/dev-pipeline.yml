name: DEV Pipeline Trigger

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Select the application to deploy'
        required: true
        type: choice
        options: [Pk-App-1, Pk-App-2, Pk-App-3, Pk-App-4, Pk-App-5]
      tag_version:
        description: 'Tag version'
        required: true
        type: string

jobs:
  trigger-dev-pipeline:
    uses: ./.github/workflows/../../DEV/pipeline.yml
    with:
      app_name: ${{ inputs.app_name }}
      tag_version: ${{ inputs.tag_version }}
    secrets: inherit
        required: true
        type: string

env:
  # GCP Configuration
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  GCR_REGISTRY: ${{ secrets.GCR_REGISTRY }}
  
  # SonarQube Configuration
  SONAR_URL: ${{ secrets.SONAR_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  # Application Configuration
  APP_NAME: ${{ inputs.app_name }}
  APP_VERSION: ${{ inputs.tag_version }}
  APP_REPO: ${{ format('org-name/{0}', inputs.app_name) }}
  ENVIRONMENT: 'DEV'

jobs:
  checkout-app:
    runs-on: [self-hosted, Runner-1]
    steps:
      - name: Checkout Pipeline Repository
        uses: actions/checkout@v3
        
      - name: Checkout Application Repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.APP_REPO }}
          path: ${{ env.APP_NAME }}
          ref: ${{ inputs.tag_version }}
          token: ${{ secrets.APP_REPO_TOKEN }}
      
      - name: Upload App Source
        uses: actions/upload-artifact@v3
        with:
          name: app-source
          path: ${{ env.APP_NAME }}
  security-check:
    needs: checkout-app
    runs-on: [self-hosted, Runner-1]
    container: 
      image: zricethezav/gitleaks
      volumes:
        - ${{ github.workspace }}:/workspace
        - /var/run/docker.sock:/var/run/docker.sock
      options: --user root --privileged
    steps:
      - name: Download App Source
        uses: actions/download-artifact@v3
        with:
          name: app-source
          path: /workspace
          
      - name: Run Gitleaks
        working-directory: /workspace
        run: |
          gitleaks detect -v --source . --report-path gitleaks-report.json
      
      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          retention-days: 7
  build:
    needs: security-check
    runs-on: [self-hosted, Runner-1]
    container:
      image: maven:3.8-openjdk-17
      volumes:
        - ${{ github.workspace }}:/workspace
        - ~/.m2:/root/.m2
      options: --user root
    steps:
      - name: Download App Source
        uses: actions/download-artifact@v3
        with:
          name: app-source
          path: .
          
      - name: Set up Maven Cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ inputs.app_name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ inputs.app_name }}-
            ${{ runner.os }}-maven-
          
      - name: Build with Maven
        working-directory: /workspace
        run: |
          mvn -Dmaven.repo.local=/root/.m2/repository clean package -DskipTests
        
      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 1
  
  test:
    needs: build
    runs-on: [self-hosted, Runner-1]
    container:
      image: maven:3.8-openjdk-17
      volumes:
        - ${{ github.workspace }}:/workspace
        - ~/.m2:/root/.m2
      options: --user root
    steps:
      - name: Download App Source
        uses: actions/download-artifact@v3
        with:
          name: app-source
          path: .
          
      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: app-jar
          path: target
          
      - name: Set up Maven Cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ inputs.app_name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ inputs.app_name }}-
            ${{ runner.os }}-maven-
          
      - name: Run Unit Tests
        run: mvn test
        
      - name: SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.APP_NAME }}
            -Dsonar.projectName=${{ env.APP_NAME }}-DEV
            -Dsonar.qualitygate.wait=true
            -Dsonar.java.binaries=target/
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
            -Dsonar.junit.reportPaths=target/surefire-reports/
            
      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_URL }}
        timeout-minutes: 5
  scan-and-push:
    needs: test
    runs-on: [self-hosted, Runner-1]
    container:
      image: aquasec/trivy:latest
      volumes:
        - ${{ github.workspace }}:/workspace
        - /var/run/docker.sock:/var/run/docker.sock
      options: --user root --privileged
    environment: dev
    steps:
      - name: Download App Source
        uses: actions/download-artifact@v3
        with:
          name: app-source
          path: .
          
      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: app-jar
          path: target
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Clean Docker System
        run: docker system prune -af --volumes
      
      - name: Build Docker Image
        run: |
          docker build -t ${{ env.APP_NAME }}:${{ env.APP_VERSION }} \
            --build-arg ENV=${{ env.ENVIRONMENT }} \
            --build-arg APP_NAME=${{ env.APP_NAME }} \
            .
      
      - name: Scan with Trivy
        run: |
          trivy image --cache-dir /workspace/.trivycache/ \
            --format json \
            --output trivy-report.json \
            --severity HIGH,CRITICAL \
            --ignore-unfixed \
            --exit-code 1 \
            ${{ env.APP_NAME }}:${{ env.APP_VERSION }}
      
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 7
      
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.GCP_SERVICE_ACCOUNT }}
      
      - name: Configure Docker for GCR
        run: |
          echo ${{ env.GCP_SERVICE_ACCOUNT }} | docker login -u _json_key --password-stdin ${{ env.GCR_REGISTRY }}
      
      - name: Push to GCR
        run: |
          # Tag with app name, version and environment
          docker tag ${{ env.APP_NAME }}:${{ env.APP_VERSION }} ${{ env.GCR_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}/dev:${{ env.APP_VERSION }}
          docker tag ${{ env.APP_NAME }}:${{ env.APP_VERSION }} ${{ env.GCR_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}/dev:latest
          
          # Push both tags
          docker push ${{ env.GCR_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}/dev:${{ env.APP_VERSION }}
          docker push ${{ env.GCR_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APP_NAME }}/dev:latest
      
      - name: Clean Docker System
        if: always()
        run: docker system prune -af --volumes

  notify:
    needs: scan-and-push
    runs-on: [self-hosted, Runner-1]
    if: always()
    steps:
      - name: Pipeline Status
        uses: actions/github-script@v6
        with:
          script: |
            const conclusion = '${{ job.status }}'
            const message = `Pipeline for ${{ env.APP_NAME }} version ${{ env.APP_VERSION }} completed with status: ${conclusion}`
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            })

      - name: Notify on Success
        if: success()
        run: echo "Pipeline completed successfully!"

      - name: Notify on Failure
        if: failure()
        run: echo "Pipeline failed!"
